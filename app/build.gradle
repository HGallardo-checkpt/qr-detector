/*
 * Copyright 2019-2020 by Security and Safety Things GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'com.android.application'
apply plugin: 'com.jaredsburrows.license'

android {
    /**
     * Compiles against the Azena SDK to make use of APIs provided by the operating system.
     */
    compileSdkVersion 'Security and Safety Things GmbH:Security and Safety Things APIs v8:29'
    /**
     * Disables app compression in order for the web server to access resources from within the packaged APK.
     */
    aaptOptions {
        noCompress ''
    }
    defaultConfig {
        manifestPlaceholders = [ applicationLabel: APP_NAME]
        applicationId 'com.checkpoint.qr.detector'

        /**
         * 27 is the minimum AOSP API version supported by the Azena SDK.
         */
        minSdkVersion 27
        targetSdkVersion 29
        def majorVersion = 8
        def minorVersion = 1
        def patchNumber = 0
        versionCode majorVersion << 16 | minorVersion << 8 | patchNumber
        versionName "$majorVersion.$minorVersion.$patchNumber"
        licenseReport {
            generateHtmlReport = true
            copyHtmlReportToAssets = true
            generateJsonReport = false
            copyJsonReportToAssets = false
        }
    }
    signingConfigs {
        /**
         * Signing configs are needed to generate a release version of the apk.
         * The following variables should be declared in your ~/.bashrc file, and should correspond to the values from:
         *
         * keytool -genkey -v -keystore <key_name>.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
         *
         * SIGNING_KEY_ALIAS = value supplied for alias_name
         * SIGNING_KEY_PASSWORD = value supplied when continuing the prompts from keytool -genkey
         * SIGNING_KEYSTORE_PATH = absolute path to <key_name>.keystore
         * SIGNING_KEYSTORE_PASSWORD = value supplied when continuing the prompts from keytool -genkey
         */
        release {
            keyAlias System.getenv('SIGNING_KEY_ALIAS')
            keyPassword System.getenv('SIGNING_KEY_PASSWORD')
            def keystorePath = System.getenv('SIGNING_KEYSTORE_PATH')
            if (keystorePath == null || keystorePath.isEmpty()) {
                logger.warn('Path to keystore is invalid!')
            } else {
                storeFile file(keystorePath)
            }
            storePassword System.getenv('SIGNING_KEYSTORE_PASSWORD')
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix '-release'
        }
        debug {
            versionNameSuffix '-debug'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
/**
 * Brings in AndroidX support libraries for annotations and other utilities. Using version 1.3.0 as
 * 1.4.x and newer are only compatible with AOSP SDK 31 and above.
 */
    implementation 'androidx.appcompat:appcompat:1.3.0'

    implementation 'com.securityandsafetythings.jumpsuite:webhelpers:0.3.0'

    implementation 'com.securityandsafetythings.jumpsuite:commonhelpers:1.1.0'

    implementation 'com.quickbirdstudios:opencv:4.5.3.0'

    implementation 'org.greenrobot:eventbus:3.3.1'

    implementation 'com.google.mlkit:barcode-scanning:17.0.2'

    implementation 'com.google.code.gson:gson:2.8.6'

    implementation 'com.google.guava:guava:31.0.1-jre'


}

/**
 * The folder name that static website assets will be copied to.
 */
def websiteAssetPath = 'website'
/**
 * The path prefix that REST API calls will be made to.
 */
def restPathPrefix = 'api'
// Add variables to the BuildConfig file that will be generated on building the app. 
android.applicationVariants.all { variant ->
    variant.buildConfigField 'String', 'WEBSITE_ASSET_PATH', "\"$websiteAssetPath\""
    variant.buildConfigField 'String', 'REST_PATH_PREFIX', "\"$restPathPrefix\""
}

/**
 * Copies the generated build directory from the webapp project (generated from yarn build) into the android project's assets directory.
 */
task copyWebapp(type: Copy, dependsOn: [':webapp:yarn_build', 'cleanWebAssets']) {
    from "${project(':webapp').buildDir}"
    into "${project.projectDir}/src/main/assets/$websiteAssetPath"
}

/**
 * Task generates the .env file for the webapp. The .env file is a vue file which contains variables. In this project, the .env
 * file creates variables for the web page title, the build path for the webapp, and the rest path prefix.
 */
task makeEnvFile()  {
    doLast {
        def WEB_PAGE_TITLE="VUE_APP_WEB_PAGE_TITLE=$APP_NAME"
        def BUILD_PATH="BUILD_PATH=${project(':webapp').buildDir}"
        def REST_PATH_PREFIX="VUE_APP_REST_PATH_PREFIX=$restPathPrefix"
        def envFile = '.env'
        delete "${project(':webapp').projectDir}/$envFile"
        new File(project(':webapp').projectDir, envFile).text =
                """$WEB_PAGE_TITLE\n$BUILD_PATH\n$REST_PATH_PREFIX"""
    }
}

task cleanWebAssets(type: Delete) {
    delete "${project.projectDir}/src/main/assets/$websiteAssetPath"
}

preBuild.dependsOn(copyWebapp)
clean.finalizedBy(':webapp:clean')
clean.finalizedBy(cleanWebAssets)

apply from: "$project.rootDir/scripts/osslicenses/osslicenses.gradle"

// Internal use only.
if (Files.exists(Paths.get("$project.rootDir/scripts/build_internal.gradle"))) {
    apply from: "$project.rootDir/scripts/build_internal.gradle"
}
